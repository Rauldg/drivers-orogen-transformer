name "transformer"

import_types_from "base"
import_types_from "aggregator"
import_types_from "BroadcastTypes.hpp"
import_types_from "TransformDefinition.hpp"

using_library "transformer"
import_types_from "transformer/TransformationStatus.hpp"

typekit do
    # This one is actually for the transformer plugin, but we want to avoid
    # adding a new package just for that
    export_types '/std/vector</base/samples/RigidBodyState>'
    export_types '/transformer/TransformationStatus'
    export_types '/transformer/TransformerStatus'
end	

# Task that allows to broadcast transformer information, mostly used for GUI
task_context "Task" do
    # Sets the configuration that should be broadcasted
    operation('setConfiguration').
        arg("configuration", "transformer/ConfigurationState")

    # Outputs a snapshot of all the port-to-frame associations declared at a
    # certain point in time. The port is declared so that
    #
    #   port_frame_associations.connect_to(input_port, :init => true)
    #
    # will send the last known state to the input port
    output_port "configuration_state", "transformer/ConfigurationState"
end

task_context "TransformationMonitor" do
    needs_configuration
    property "transforms", "std/vector<transformer/TransformDefinition>"

    #usually done by orogen
    property "transformer_max_latency", "double", 0.5
    property "static_transformations", '/std/vector</base/samples/RigidBodyState>'
    property "transformer_status_period", "double", 0.5
    input_port "dynamic_transformations", "/base/samples/RigidBodyState"
    output_port "transformer_stream_aligner_status", "aggregator/StreamAlignerStatus"
    output_port "transformer_status", "transformer/TransformerStatus"
    
    dynamic_output_port /.*/, "/base/samples/RigidBodyState"

    periodic 0.1
    
    operation('register_transform').
        returns('/std/string').
        argument('transform_definition', 'transformer/TransformDefinition')
    operation('deregister_transform').
        argument('transform_definition', 'transformer/TransformDefinition')
    
    #I get compile errors, when I let oroGen handle the inclusion of transformer
    #into the component. Therefore I do it manually.
    #transformer do
    #    transform 'from', 'to'
    #    max_latency '0.5'
    #end
end

task_context "TransformationProxy" do
    input_port "input", "/base/samples/RigidBodyState"
    output_port "output", "/base/samples/RigidBodyState"

    port_driven 'input'
end


simple_deployment 'transformer_broadcaster', 'transformer::Task'

deployment 'transformation_monitor' do
    task 'transformation_monitor', 'transformer::TransformationMonitor'
end
